
#include<iostream>
#include<string>
#include<vector>
#include<cmath>
#include<map>
#include<algorithm>
#include<iomanip>

using namespace std;


class ChessBoard{
    public:

        vector<int> board;

        vector<vector<int>> legalMoves;

        const vector<int> directions = {0, 1, 2, 3, 4, 5, 6, 7};

        vector<vector<int>> edges;

        const vector<int> direction_offsets = {8, 1, -8, -1, 9, -7, -9, 7};
        int En_pessant_pos;

        int bking_pos;

        int wking_pos;
            
        ChessBoard(vector<int> board){
            this->board = board;
            En_pessant_pos=64;
            for(int pos = 0; pos < board.size(); pos++){
                if(board[pos] == 1)
                    wking_pos = pos;
                else if(board[pos] == -1)
                    bking_pos = pos;
                if(abs(board[pos]) == 9)
                    En_pessant_pos=pos;
            }
        }
        
        void getEdgeDistance();

        vector<vector<int>> genMovesForEachPiece(int friendly);

        void genMoves(int start_pos, int friendly, int enemy);

        void checkCastle(int start_pos, vector<int> &move, int friendly, int enemy);

        int IsCheck(int friendly);
        void ChangeBoard(int start,int end);

};


void ChessBoard::ChangeBoard(int start,int end)
{
    int friendly = 0;
    if (board[start] > 0)
        friendly = 1;
    if (board[start] < 0)
        friendly = -1;
    if (friendly == 0)
        return;
    if (En_pessant_pos != 64)
    {
        if (abs(board[start]) == 2 && abs(board[end]) == 9)
        {
            board[start] = 0;
            board[end] = 2 * friendly;
            board[end + 8 * friendly] = 0;
            En_pessant_pos = 64;
            return;
        }
    }
    En_pessant_pos = 64;
    if (abs(board[start]) == 2 && abs(end - start) == 16)
    {
        board[start] = 0;
        board[end] = 2 * friendly;
        board[(end + start) / 2] = 9 * (-friendly);
        return;
    }
    if (abs(board[start]) == 1 && abs(end - start) == 2)
    {
        if (board[start] == 1 && (end - start) > 0)
        {
            board[start] = 0;
            board[end] = 1;
            board[63] = 0;
            board[(start + end) / 2] = 6;
            if(board[56]==7)
            {
                board[56]=6;
            }
            return;
        }
        if (board[start] == 1 && (end - start) < 0)
        {
            board[start] = 0;
            board[end] = 1;
            board[56] = 0;
            board[(start + end) / 2] = 6;
            if(board[63]==7)
            {
                board[63]=6;
            }
            return;
        }
        if (board[start] == -1 && (end - start) > 0)
        {
            board[start] = 0;
            board[end] = -1;
            board[7] = 0;
           
            board[(start + end) / 2] = -6;
            if(board[0]==-7)
            {
                board[0]=-6;
            }
            return;
        }
        if (board[start] == -1 && (end - start) < 0)
        {
            board[start] = 0;
            board[end] = -1;
            board[0] = 0;
            board[(start + end) / 2] = -6;
            if(board[7]==-7)
            {
                board[7]=-6;
            }
            return;
        }
    }
    if(board[start]==-1)
    {
        if(board[0]==-7)
        {
            board[0]=-6;
        }
        if(board[7]==-7)
        {
            board[7]=-6;
        }
    }
    if(board[start]==1)
    {
        if(board[63]==7)
        {
            board[63]=6;
        }
        if(board[56]==7)
        {
            board[56]=6;
        }
    }
    if(abs(board[start])==7)
    {
        board[end] = board[start]-1*friendly;
        board[start] = 0;
        return;  
    }
    board[end] = board[start];
    board[start] = 0;
    return;
}


int ChessBoard::IsCheck(int friendly)
{

    int kingpos;
    int check = 0;
    if (friendly == 1)
    {
        kingpos = wking_pos;
    }
    else if (friendly == -1)
    {
        kingpos = bking_pos;
    }
    int i = 0, j = 0;
    int newpos = kingpos;
    //rook and queen check
    for (i = 0; i < 4; i++)
    {
        newpos = kingpos;

        for (j = 1; j <= edges[kingpos][i]; j++)
        {

            switch (i)
            {
            case 0:
                newpos = newpos + 8;

                break;
            case 1:
                newpos = newpos + 1;
                break;
            case 2:
                newpos = newpos - 8;
                break;
            case 3:
                newpos = newpos - 1;
                break;

            }
            if (board[newpos] * friendly > 0 && board[newpos]*friendly!=9)
            {
                break;
            }
            if (board[newpos] == -4 * friendly || board[newpos] == -2 * friendly || board[newpos] == -3 * friendly || board[newpos] == -1 * friendly)
            {
                break;
            }
            if (board[newpos] == -friendly * 6 || board[newpos] == -friendly * 7 || board[newpos] == -friendly * 5)
            {
                check++;
                break;
            }

        }
    }
    bool pawncheck = false;
    //bishop, queen and pawn check
    for (i = 4; i < 8; i++)
    {
        newpos = kingpos;
        for (j = 1; j <= edges[kingpos][i]; j++)
        {
            pawncheck = false;
            switch (i)
            {
            case 4:
                newpos = newpos + 8 + 1;
                if (friendly == -1 && j == 1)
                {
                    pawncheck = true;
                }
                break;
            case 5:
                newpos = newpos + 1 - 8;
                if (friendly == 1 && j == 1)
                {
                    pawncheck = true;
                }
                break;
            case 6:
                newpos = newpos - 8 - 1;
                if (friendly == 1 && j == 1)
                {
                    pawncheck = true;
                }
                break;
            case 7:
                newpos = newpos - 1 + 8;
                if (friendly == -1 && j == 1)
                {
                    pawncheck = true;
                }
                break;

            }
            if (board[newpos] * friendly > 0 && board[newpos]*friendly!=9)
            {
                break;
            }
            if (board[newpos] == -friendly * 6 || board[newpos] == -friendly * 7)
            {
                break;
            }
            if (board[newpos] == -friendly * 5 || board[newpos] == -friendly * 3)
            {
                check++;
                break;
            }
            if (pawncheck)
            {
                if (board[newpos] == -friendly * 2)
                {
                    check++;
                    break;
                }
            }
            if (!pawncheck)
            {
                if (board[newpos] == -friendly * 2)
                {
                    break;
                }
            }

        }
    }
    //knight check
    int dirnY[4] = { -2,-1,1,2 };
    int dirnX[2];

    for (i = 0; i < 4; i++)
    {
        int newpos = kingpos + dirnY[i] * 8;
        if (newpos >= 64 || newpos < 0)
            continue;
        int row1 = newpos / 8;
        if (abs(dirnY[i]) == 2)
        {
            dirnX[0] = -1;
            dirnX[1] = 1;
        }
        if (abs(dirnY[i]) == 1)
        {
            dirnX[0] = -2;
            dirnX[1] = 2;
        }
        for (j = 0; j < 2; j++)
        {
            int npos = newpos + dirnX[j];
            int row2 = npos / 8;
            if (row1 != row2)
                continue;
            if (board[npos] == -friendly * 4)
            {
                check++;

            }
        }

    }
    return check;
}

//gets the distance of eacj square from edges in all 8 direcions and stores it in edges vector
void ChessBoard::getEdgeDistance(){
    for(int i = 0; i < 64; i++){
        vector <int> distance;
        
        int row = i / 8;
        int col = i % 8;

        distance.push_back(7 - row);
        distance.push_back(7 - col);
        distance.push_back(row);
        distance.push_back(col);
        
        int ne = (7 - row) < (7 - col) ? (7 - row) : (7 - col);
        int se = (7 - col) < row ? (7 - col) : row;
        int sw = row < col ? row : col;
        int nw = (7 - row) < col ? (7 - row) : col;

        distance.push_back(ne);
        distance.push_back(se);
        distance.push_back(sw);
        distance.push_back(nw);

        edges.push_back(distance);
        
    }
}

//generates moves for each friendly piece, that is, the for the pieces whose turn it is currently
vector<vector<int>> ChessBoard::genMovesForEachPiece(int friendly){
    legalMoves.clear();
    //declaring enemy colour
    int enemy;
    if(friendly == 1)
        enemy = -1;
    else
        enemy = 1;
    
    //checking each square on the board for friendly pieces
    for(int i = 0; i < 64; i++){
        //if no piece at this position then skip
        if(board[i] == 0 || abs(board[i]) == 9)
            continue;
        
        //we're only interested in the pieces having the colour of the one playing this turn
        else if((friendly == 1 && board[i] > 0) || (friendly == -1 && board[i] < 0)){
            genMoves(i, friendly, enemy);
        }

        //append list of moves to legalmoves vector
    }

    return legalMoves;
}


//generates moves for a given piece and returns a vector of move positions for that piece
void ChessBoard::genMoves(int start_pos, int friendly, int enemy){
    int start_dir;
    int end_dir;
    int move_limit = 99;

    bool pawn = false;
    
    vector<int> move;
    move.push_back(start_pos);

    //checking the piece to determine the direction in which it can move
    //the pieces are mapped as follows: 
    //'k' : 1, 'p' : 2, 'b' : 3, 'n' : 4, 'q' : 5, 'r' : 6, 'r(which can castle)' : 7 
    //the black pieces are negative while white pieces are positive

    switch(abs(board[start_pos])){
        case 1:
            start_dir = 0;
            end_dir = 8;
            checkCastle(start_pos, move, friendly, enemy);
            break;
        case 2:
            pawn = true;
            if(board[start_pos] < 0){
                start_dir = 0;
                end_dir = 1;
            }
            else{
                start_dir = 2;
                end_dir = 3;
            }
            break;
        case 3:
            start_dir = 4;
            end_dir = 8;
        case 4:
            break;
        
        case 5:
            start_dir = 0;
            end_dir = 8;
            break;
        case 6:
        
        case 7:
            start_dir = 0;
            end_dir = 4;
            break;
    }


    
    //checking if the current piece is a knight
    if(abs(board[start_pos]) != 4){    

        //iterating for each direction
        for(int direction = start_dir; direction < end_dir; direction++){

            //getting the move offset for current direction 
            
            int offset = direction_offsets[direction];
            
            int pos = start_pos + offset;

            //checking for a pawn in non-starting position or for king
            //move limit is important for pieces like kings and pawns which can only move a 
            //limited number of squares in a particular direction
            
            if(abs(board[start_pos]) == 1 || (board[start_pos] == -2 && start_pos > 15) || (board[start_pos] == 2 && start_pos < 48))
                move_limit = 1;
            
            //checking for pawn in starting position
            else if((board[start_pos] == -2 && start_pos > 7 && start_pos < 16) || (board[start_pos] == 2 && start_pos < 56 && start_pos > 47))
                move_limit = 2;
            
            //iterating until the edge in the current direction is reached
            for(int dir = 0; dir < edges[start_pos][direction] && move_limit > 0; dir++){
                
                move.push_back(pos);
                
                //if current position is empty, add it to move vector and increase the position by the offset
                //9 and -9 are en passant squares. They do not have an actual piece on them
                if(board[pos] == 0 || abs(board[pos]) == 9){
                    
                    //if((!legalMoves.empty() && find(legalMoves.begin(), legalMoves.end(), move) == legalMoves.end()) || legalMoves.empty()){
                        
                    //}
                    legalMoves.push_back(move);
                    

                    pos += offset;
                    move_limit--;
                }

                //if piece is not a pawn and the square has an enemy piece in the direction the piece is moving, capture it
                //pawns capture diagonally so must check for them here
                else if(pawn == false && ((friendly == 1 && board[pos] < 0) || (friendly == -1 && board[pos] > 0))){
                    legalMoves.push_back(move);
                    move.pop_back();
                    break;
                }

                //if a friendly piece is encountered, it cannot be captured and hence we break out of the loop
                else if((friendly == 1 && board[pos] > 0) || (friendly == -1 && board[pos] < 0)){
                    move.pop_back();
                    break;
                }

                move.pop_back();
                
            }

            //addtional pawn moves like enpassant or attacking
            //en passant not yet done
            if(pawn){
                if(friendly == 1){
                    if(edges[start_pos][5] && board[start_pos - 7] < 0){
                        move.push_back(start_pos - 7);
                        legalMoves.push_back(move);
                        move.pop_back();
                    }
                    if(edges[start_pos][6] && board[start_pos - 9] < 0){
                        move.push_back(start_pos - 9);
                        legalMoves.push_back(move);
                        move.pop_back();
                    }
                    
                }
            
                else{
                    if(edges[start_pos][4] && board[start_pos + 9] > 0){
                        move.push_back(start_pos + 9);
                        legalMoves.push_back(move);
                        move.pop_back();
                    }
                    if(edges[start_pos][7] && board[start_pos + 7] > 0){
                        move.push_back(start_pos + 7);
                        legalMoves.push_back(move);
                        move.pop_back();
                    }
                }
            }
        }
    }

    //getting knight moves
    else{
        int row = start_pos / 8;
        int col = start_pos % 8;

        if((row + 2 < 8) && (col + 1 < 8) && ((friendly == 1 && board[(row + 2) * 8 + col + 1] <= 0) || friendly == -1 && board[(row + 2) * 8 + col + 1] >= 0))
        {
            move.push_back((row + 2) * 8 + col + 1);
            legalMoves.push_back(move);
            move.pop_back();
        }

        if((row + 2 < 8) && (col - 1 >= 0) && ((friendly == 1 && board[(row + 2) * 8 + col - 1] <= 0) || friendly == -1 && board[(row + 2) * 8 + col - 1] >= 0))
        {
            move.push_back((row + 2) * 8 + col - 1);
            legalMoves.push_back(move);
            move.pop_back();
        }

        if((row - 2 >= 0) && (col + 1 < 8) && ((friendly == 1 && board[(row - 2) * 8 + col + 1] <= 0) || friendly == -1 && board[(row - 2) * 8 + col + 1] >= 0))
        {
            move.push_back((row - 2) * 8 + col + 1);
            legalMoves.push_back(move);
            move.pop_back();
        }

        if((row - 2 >= 0) && (col - 1 >= 0) && ((friendly == 1 && board[(row - 2) * 8 + col - 1] <= 0) || friendly == -1 && board[(row - 2) * 8 + col - 1] >= 0))
        {
            move.push_back((row - 2) * 8 + col - 1);
            legalMoves.push_back(move);
            move.pop_back();
        }

        if((row + 1 < 8) && (col + 2 < 8) && ((friendly == 1 && board[(row + 1) * 8 + col + 2] <= 0) || friendly == -1 && board[(row + 1) * 8 + col + 2] >= 0))
        {
            move.push_back((row + 1) * 8 + col + 2);
            legalMoves.push_back(move);
            move.pop_back();
        }

        if((row - 1 >=0) && (col + 2 < 8) && ((friendly == 1 && board[(row - 1) * 8 + col + 2] <= 0) || friendly == -1 && board[(row - 1) * 8 + col + 2] >= 0))
        {
            move.push_back((row - 1) * 8 + col + 2);
            legalMoves.push_back(move);
            move.pop_back();
        }

        if((row + 1 < 8) && (col - 2 >= 0) && ((friendly == 1 && board[(row + 1) * 8 + col - 2] <= 0) || friendly == -1 && board[(row + 1) * 8 + col - 2] >= 0))
        {
            move.push_back((row + 1) * 8 + col - 2);
            legalMoves.push_back(move);
            move.pop_back();
        }

        if((row - 1 >= 0) && (col - 2 >= 0) && ((friendly == 1 && board[(row - 1) * 8 + col - 2] <= 0) || friendly == -1 && board[(row - 1) * 8 + col - 2] >= 0))
        {
            move.push_back((row - 1) * 8 + col - 2);
            legalMoves.push_back(move);
            move.pop_back();
        }
    }
    

    
}


void ChessBoard::checkCastle(int start_pos, vector<int> &move, int friendly, int enemy){
    //checking if castling is possible
    int low_lim , up_lim;
    if(friendly == 1){
        if((start_pos != 60) || ((board[63] != 7) && board[56] != 7))
            return;
        else{
            low_lim = 56;
            up_lim = 63;
        }
    }
    else{ 
        if((start_pos != 4) || ((board[0] != -7) && board[7] != -7))
            return;
        else{
            low_lim = 0;
            up_lim = 7;
        }
    
    }

    int pos = start_pos + 1;
    while(pos < up_lim && board[pos] == 0){
        //check if there is a check at this position
        pos++;
        
    }
    
    if(pos == up_lim && abs(board[pos]) == 7){
        //move.push_back(start_pos + 1);
        //legalMoves.push_back(move);
        //move.pop_back();

        move.push_back(start_pos + 2);
        legalMoves.push_back(move);
        move.pop_back();
    }

    pos = start_pos - 1;

    while(pos > low_lim && board[pos] == 0){
        //check if there is a check at this position
        pos--;
    }
    
    if(pos == low_lim && abs(board[pos]) == 7){
        //move.push_back(start_pos - 1);
        //legalMoves.push_back(move);
        //move.pop_back();

        move.push_back(start_pos - 2);
        legalMoves.push_back(move);
        move.pop_back();
    }
}
